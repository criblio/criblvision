### GENERAL SEARCHES ###

[Deployment Annotations]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
description = Used for annotating time-series charts on dashboards with information regarding deployments that have happened in the selected time range
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` source!=cribl action=deploy source="*audit.log*" \
| eval annotation_category = "deploy", annotation_label = "worker_group=".id.", commit=".version.", user=".user

### LOOKUP POPULATING SEARCHES ###

# deprecated, will be removed in a later release
[Populate Cribl Stream Worker Lookup]
disabled = 1
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 0 * * * *
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = |  tstats count WHERE `set_cribl_internal_log_index` BY host \
|  rename host AS worker\
|  join type=left left=L right=R WHERE L.worker=R.host \
    [ | mstats count(*) AS * WHERE `set_cribl_metrics_index` BY host group ]\
| rename L.worker AS worker R.group AS worker_group\
| table worker worker_group\
| where isnotnull(worker_group)\
| inputlookup cribl_stream_workers.csv append=true\
| dedup worker worker_group\
| outputlookup cribl_stream_workers.csv

[Populate Cribl Stream Asset Lookup]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 0
alert.track = 0
cron_schedule = 0 * * * *
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = | tstats latest(_time) AS latest_event_time WHERE `set_cribl_internal_log_index` `set_cribl_log_sourcetype` BY host\
| join type=left left=L right=R WHERE L.host=R.host\
    [| mstats latest_time(`set_cribl_metrics_prefix(health.outputs)`) AS latest_metric_time WHERE `set_cribl_metrics_index` output="devnull:devnull" BY host group fillnull_value=`set_unknown_worker_group_value`\
    | join type=left left=L right=R WHERE L.host=R.guid\
        [ search `set_cribl_internal_log_index` `set_cribl_log_sourcetype` channel=CriblWorkerDetails\
        | stats latest(guid) AS guid BY host ]\
    | eval host = coalesce('R.host', 'L.host')\
    | fields - L.host R.*\
    | rename L.* AS * ]\
| rename L.host AS host R.group aS group L.latest_event_time AS latest_event_time R.latest_metric_time AS latest_metric_time\
| join type=left left=L right=R WHERE L.host=R.host\
    [ search `set_cribl_internal_log_index` `set_cribl_log_sourcetype` channel=ShutdownMgr\
    | stats latest(_time) AS latest_shutdown_time BY host ]\
| rename L.* AS * R.latest_shutdown_time AS latest_shutdown_time\
| join type=left left=L right=R WHERE L.host=R.host\
    [ search `set_cribl_internal_log_index` `set_cribl_log_sourcetype` `set_cribl_environment_field_name`=*\
    | stats count BY host `set_cribl_environment_field_name` ]\
| rename L.* AS * R.`set_cribl_environment_field_name` AS `set_cribl_environment_field_name`\
| join type=left left=L right=R WHERE L.host=R.host\
    [ search `set_cribl_internal_log_index` `set_cribl_log_sourcetype` channel IN (CriblInstanceDetails, CriblWorkerDetails)\
    | rename instance_type AS collected_instance_type worker_group AS collected_worker_group\
    | fields host guid version collected_*\
    | stats latest(*) AS * BY host ]\
| rename L.* AS * R.collected_* AS collected_* R.guid AS guid R.version AS version\
| table host `set_cribl_environment_field_name` group latest_event_time latest_metric_time latest_shutdown_time collected* guid version\
| eval calculated_instance_type = case(isnull(latest_metric_time), "leader", group == `set_unknown_worker_group_value`, "single", isnotnull(latest_event_time) AND isnotnull(latest_metric_time), "worker", true(), "unknown")\
| eval calculated_worker_group = if(isnull(group) OR len(group) == 0, `set_unknown_worker_group_value`, group), latest_activity_time = max(latest_event_time, latest_metric_time)\
| eval environment = coalesce(`set_cribl_environment_field_name`, `set_unknown_worker_group_value`)\
| table host environment *instance_type *worker_group latest_activity_time latest_shutdown_time guid version\
| inputlookup cribl_stream_assets append=true\
| stats values(*instance_type) AS *instance_type values(*worker_group) AS *worker_group values(environment) AS environment values(guid) AS guid values(version) AS version max(latest_activity_time) AS latest_activity_time max(latest_shutdown_time) AS latest_shutdown_time latest(status) AS latest_status BY host\
| eval instance_type = coalesce(collected_instance_type, instance_type, calculated_instance_type), worker_group = coalesce(collected_worker_group, worker_group, calculated_worker_group)\
| eval environment = if(mvcount(environment) > 1, mvfilter(environment != `set_unknown_worker_group_value`), environment), environment = mvjoin(environment, ",")\
| eval status = case(latest_status == "inactive", "inactive", abs(latest_activity_time - latest_shutdown_time) < `set_shutdown_activity_difference_secs`, "shutdown", relative_time(now(), `set_missing_asset_relative_time`) < latest_activity_time, "active", true(), "missing")\
| fields - calculated* collected*\
| outputlookup cribl_stream_assets

### ALERTS ###

[CriblVision Alert - Blocked Destinations]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = host,instance_type,worker_group,output
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` `set_cribl_log_sourcetype` instance_type!=leader channel=output:* message="sending is blocked*"\
| rex field=channel "output:(?<output>.*)"\
| stats count AS blocked_destination_count BY host instance_type worker_group output\
| where blocked_destination_count > `set_alert_threshold_blocked_destinations`\
| table host instance_type worker_group output

[CriblVision Alert - CPU Usage Over Threshold]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = host,instance_type,worker_group
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` message="_raw stats"\
| bin _time span=1m \
| stats max(cpuPerc) AS cpu_pct BY _time host instance_type worker_group\
| stats count(eval(cpu_pct > `set_alert_unhealthy_cpu_usage_pct`)) AS unhealthy_cpu_usage count AS total BY host instance_type worker_group\
| eval unhealthy_cpu_usage_pct = round((unhealthy_cpu_usage / total) * 100, 2)\
| where unhealthy_cpu_usage_pct > `set_alert_threshold_unhealthy_cpu_usage_pct`\
| table host instance_type worker_group unhealthy_cpu_usage_pct

[CriblVision Alert - Cluster Communication Errors]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = host,instance_type,worker_group
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` instance_type!=single channel=clustercomm level=warn OR level=error NOT message=metric*\
| stats count as cluster_communication_errors BY host instance_type worker_group\
| where cluster_communication_errors > `set_alert_threshold_cluster_communication_errors`

[CriblVision Alert - Destinations Experiencing Backpressure]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = host,instance_type,worker_group,output
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` `set_cribl_log_sourcetype` `set_alert_ignored_destinations` instance_type!=leader channel=output:* message="begin backpressure*"\
| stats count AS begin_backpressure_count BY host instance_type worker_group output reason.message\
| eval reason = 'reason.message'." (".begin_backpressure_count.")"\
| stats sum(begin_backpressure_count) AS begin_backpressure_count values(reason) AS reason BY host instance_type worker_group output\
| where begin_backpressure_count > `set_alert_threshold_backpressure`\
| table host instance_type worker_group output reason

[CriblVision Alert - Missing Cribl Stream Assets]
disabled = 1
action.webhook.enable_allowlist = 0
alert.suppress = 1
alert.suppress.fields = host,instance_type,worker_group
alert.suppress.period = 1h
alert.track = 1
auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
cron_schedule = */15 * * * *
enableSched = 1
quantity = 0
relation = greater than
search = | inputlookup cribl_stream_assets\
| search status="missing"\
| table host instance_type worker_group latest_activity_time\
| eval latest_activity_time = strftime(latest_activity_time, "%Y-%m-%dT%H:%M:%S.%3N")\
| rename host AS Host instance_type AS "Instance Type" worker_group AS "Worker Group" latest_activity_time AS "Latest Activity Time"

[CriblVision Alert - No Input From Sources]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = instance_type,group,input
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = | mstats sum(`set_cribl_metrics_prefix(total.in_events)`) AS in_events max(`set_cribl_metrics_prefix(health.inputs)`) AS health WHERE `set_cribl_metrics_index` `set_alert_ignored_sources` fillnull_value=`set_unknown_worker_group_value` span=1m BY input group\
| fillnull value=0 in_events\
| stats count(eval(in_events == 0)) AS no_events count AS total BY group input\
| eval no_events_pct = round((no_events / total) * 100, 2), instance_type = if(group == `set_unknown_worker_group_value`, "single", "worker")\
| where no_events_pct > `set_alert_threshold_no_source_thruput_pct`\
| table instance_type group input no_events_pct

[CriblVision Alert - No Output From Destinations]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = instance_type,group,output
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = | mstats sum(`set_cribl_metrics_prefix(total.out_events)`) AS out_events max(`set_cribl_metrics_prefix(health.outputs)`) AS health WHERE `set_cribl_metrics_index` `set_alert_ignored_destinations` fillnull_value=`set_unknown_worker_group_value` span=1m BY output group\
| fillnull value=0 out_events\
| stats count(eval(out_events == 0)) AS no_events count AS total BY group output\
| eval no_events_pct = round((no_events / total) * 100, 2), instance_type = if(group == `set_unknown_worker_group_value`, "single", "worker")\
| where no_events_pct > `set_alert_threshold_no_destination_thruput_pct`\
| table instance_type group output no_events_pct

[CriblVision Alert - Opened Connections Over Threshold]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = host,instance_type,worker_group
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` `set_cribl_log_sourcetype` message="_raw stats" openCxn=*\
| bin _time span=1m\
| stats sum(openCxn) AS open_connections BY _time host instance_type worker_group\
| stats count(eval(open_connections > `set_alert_unhealthy_open_connections_count`)) AS unhealthy_open_connections_count count AS total BY host instance_type worker_group\
| eval unhealthy_open_connections_pct = round(( unhealthy_open_connections_count / total) * 100, 2)\
| where unhealthy_open_connections_pct > `set_alert_threshold_unhealthy_open_connections_pct`\
| table host instance_type worker_group unhealthy_open_connections_pct

[CriblVision Alert - Persistent Queue Initialized]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = input,instance_type,worker_group
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` `set_cribl_log_sourcetype` instance_type!=leader channel=SourcePQ:* message="initializing persistent queue"\
| rex field=channel "SourcePQ:(?<input>.*)"\
| stats count AS pq_initialized_count BY worker_group input\
| where pq_initialized_count > `set_alert_threshold_pq_initialized_count`\
| table worker_group input

[CriblVision Alert - RSS Memory Usage Within Threshold]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = host,instance_type,worker_group
alert.suppress.period = 1h
alert.track = 1
counttype = number of events 
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` message="_raw stats"\
| bin _time span=1m\
| stats sum(mem.rss) AS mem_rss BY _time host instance_type worker_group\
| stats max(mem_rss) AS mem_rss BY _time host instance_type worker_group\
| stats count(eval(mem_rss > `set_alert_lower_limit_unhealthy_memory_usage_mb` AND mem_rss <= `set_alert_upper_limit_unhealthy_memory_usage_mb`)) AS unhealthy_memory_rss_usage count AS total BY host instance_type worker_group\
| eval unhealthy_memory_rss_usage_pct = round(( unhealthy_memory_rss_usage / total) * 100, 2)\
| where unhealthy_memory_rss_usage_pct > `set_alert_threshold_unhealthy_memory_usage_mb_pct`\
| table host instance_type worker_group unhealthy_memory_rss_usage_pct

[CriblVision Alert - Shutdown Cribl Stream Assets]
disabled = 1
action.webhook.enable_allowlist = 0
alert.suppress = 1
alert.suppress.fields = host,instance_type,worker_group
alert.suppress.period = 1h
alert.track = 1
auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
cron_schedule = */15 * * * *
enableSched = 1
quantity = 0
relation = greater than
search = | inputlookup cribl_stream_assets\
| search status="shutdown"\
| table host instance_type worker_group latest_shutdown_time\
| eval latest_shutdown_time = strftime(latest_shutdown_time, "%Y-%m-%dT%H:%M:%S.%3N")\
| rename host AS Host instance_type AS "Instance Type" worker_group AS "Worker Group" latest_shutdown_time AS "Latest Shutdown Time"

[CriblVision Alert - Unhealthy Destinations]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = instance_type,group,output
alert.suppress.period = 60s
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = | mstats max(`set_cribl_metrics_prefix(health.outputs)`) AS health WHERE `set_cribl_metrics_index` `set_alert_ignored_destinations` BY output group fillnull_value=`set_unknown_worker_group_value` span=1m\
| stats count(eval(health == 2)) AS troubled_count count AS total BY group output\
| eval unhealthy_pct = (troubled_count / total) * 100, instance_type = if(group == `set_unknown_worker_group_value`, "single", "worker")\
| where unhealthy_pct > `set_alert_threshold_unhealthy_destinations_pct`\
| table instance_type group output unhealthy_pct

[CriblVision Alert - Unhealthy Sources]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = instance_type,group,input
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = | mstats max(`set_cribl_metrics_prefix(health.inputs)`) AS health WHERE `set_cribl_metrics_index` `set_alert_ignored_sources` BY input group fillnull_value=`set_unknown_worker_group_value` span=1m\
| stats count(eval(health == 2)) AS troubled_count count AS total BY group input\
| eval unhealthy_pct = (troubled_count / total) * 100, instance_type = if(group == `set_unknown_worker_group_value`, "single", "worker")\
| where unhealthy_pct > `set_alert_threshold_unhealthy_sources_pct`\
| table instance_type group input unhealthy_pct

[CriblVision Alert - Worker Process Restarted]
disabled = 1
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = host,instance_type,worker_group
alert.suppress.period = 1h
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = criblvision
request.ui_dispatch_view = search
search = `set_cribl_internal_log_index` `set_cribl_log_sourcetype` message="restarting worker process"\
| stats count AS worker_process_restarts BY host instance_type worker_group\
| where worker_process_restarts > `set_alert_threshold_worker_process_restarts`